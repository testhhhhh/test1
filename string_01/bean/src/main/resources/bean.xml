<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--把对象的创建交给spring来管理-->
    <!--spring对bean的管理细节
        创建bean的三种方式
        bean对象的作用范围
        bean对象的生命周期
        -->

    <!--创建bean的三种方式-->
    <!--第一种方式，使用默认构造函数创建，
            在spring配置文件中使用bean标签，配以id和class属性之后，没有其他属性和标签时，采用默认构造函数创建bean对象，
            此时如果类中没有构造函数，则对象无法创建
             <bean id="accountService" class="com.lear.service.com.lear.service.impl.AccountServiceImpl"></bean>
    -->

     <!--第二种方式，使用普通工厂终点方法创建对象（使用某个类中的方法创建对象，并存入spring容器
        <bean id="InstanceFactory" class="com.lear.factory.InstanceFactory"></bean>
        <bean id="accountService" factory-bean="InstanceFactory" factory-method="getAccountService"></bean>
     -->
     <!--第三种方法，使用工厂中放静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器
     <bean id="accountService" class="com.lear.factory.InstanceFactory" factory-method="getAccountService"></bean>
     -->

    <!--bean标签的作用范围
        bean标签的scope属性：作用用于指定bean的作用范围
        取值：singleton  单例的  默认值  常用
              prototype   多例的  常用
              request   作用于web应用的请求范围
              session   作用于web应用的会话范围
              global-session  作用于集群环境的会话范围（全局会话范围）当不是集群环境时，它就是session
    -->

    <!--bean对象的生命周期
        单例对象：出生：当容器创建时出生
                 活着：只要容器存在，对象一直活着
                 死亡：容器销毁，对象消亡
                 总结：单例对象的生命周期和容器相同
        多例对象：出生：当我们使用对象时spring框架为我们创建
                 活着：对象只要是在使用过程中就一直活着
                 死亡：当对象长时间不用，且没有别的对象引用时，由java的垃圾回收器回收。
    -->
        <bean id="accountService" class="com.lear.service.com.lear.service.impl.AccountServiceImpl" scope="singleton" init-method="init" destroy-method="destory"></bean>

</beans>