<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--配置spring的ioc，吧service对象配置进来-->
    <bean id="accountService" class="com.lear.service.impl.AccountServiceImpl"></bean>

    <!--spring的aop配置。spring基于xml的aop配置步骤
        1.把通知bean也交给spring来管理
        2.使用aop:config标签表明开始aop的配置
        3.使用aop：aspect标签表明开始配置切面
            id属性是给切面提供一个唯一标志
            ref属性是指定通知类bean的id
        4.在aop：aspect标签的内部使用对应的标签来配置通知的类型
            我们现在的示例是让printlog方法在切入点方法执行之前执行，所以是前置通知
            aop：before    表示配置前置通知
            method     用于指定logger类中哪个方法是前置通知
            pointcut    用于指定切入点表达式，该表达式的含义指的是对业务层中哪些方法增强

          切入点表达式的写法：
            关键字：execution（表达式）
            表达式：访问修饰符   返回值   包名.包名.包名....类名.方法名（参数列表）
            标准表达式写法：
                    public void com.lear.service.impl.AccountServiceImpl.saveAccount()
             访问修饰符可以省略  void com.lear.service.impl.AccountServiceImpl.saveAccount()
             返回值可以使用通配符表示任意返回值   * com.lear.service.impl.AccountServiceImpl.saveAccount()
             包名可以使用通配符表示任意包，但是有几级包，就需要写几个*.      * *.*.*.*.AccountServiceImpl.saveAccount()
             包名可以使用..表示当前包及其子包    * *..AccountServiceImpl.saveAccount()
             类名和方法名都可以使用*来实行统配   * *..*.*()
             参数列表可以直接写数据类型：    基本数据类型直接写名称 int  引用数据类型写包名.类名的方式   java.lang.String
             全通配写法：
                * *..*.*(..)-->
    <bean id="logger" class="com.lear.utils.Logger"></bean>

    <!--配置aop-->
    <aop:config>
        <!--配置切面-->
        <aop:aspect id="logAdvice" ref="logger">
            <!--配置通知的类型，且建立通知方法和切入点方法的关联-->
           <aop:before method="printLog" pointcut="execution(* *..*.*(int))"></aop:before>

        </aop:aspect>
    </aop:config>
</beans>